
//#include <ros/ros.h>

//// MoveIt!
//#include <moveit/robot_model_loader/robot_model_loader.h>
//#include <moveit/robot_model/robot_model.h>
//#include <moveit/robot_state/robot_state.h>

//int main(int argc, char **argv)
//{
//  ros::init (argc, argv, "kinematics");
//  ros::AsyncSpinner spinner(1);
//  spinner.start();

//  // Setting up to start using the RobotModel class is very easy. In
//  // general, you will find that most higher-level components will
//  // return a shared pointer to the RobotModel. You should always use
//  // that when possible. In this example, we will start with such a
//  // shared pointer and discuss only the basic API. You can have a
//  // look at the actual code API for these classes to get more
//  // information about how to use more features provided by these
//  // classes.
//  //
//  // We will start by instantiating a
//  // `RobotModelLoader`_
//  // object, which will look up
//  // the robot description on the ROS parameter server and construct a
//  // :moveit_core:`RobotModel` for us to use.
//  //
//  // .. _RobotModelLoader: http://docs.ros.org/api/moveit_ros_planning/html/classrobot__model__loader_1_1RobotModelLoader.html
//  robot_model_loader::RobotModelLoader robot_model_loader("robot_description");
//  robot_model::RobotModelPtr kinematic_model = robot_model_loader.getModel();
//  ROS_INFO("Model frame: %s", kinematic_model->getModelFrame().c_str());

//  // Using the :moveit_core:`RobotModel`, we can construct a
//  // :moveit_core:`RobotState` that maintains the configuration
//  // of the robot. We will set all joints in the state to their
//  // default values. We can then get a
//  // :moveit_core:`JointModelGroup`, which represents the robot
//  // model for a particular group, e.g. the "right_arm" of the PR2
//  // robot.
//  robot_state::RobotStatePtr kinematic_state(new robot_state::RobotState(kinematic_model));
//  kinematic_state->setToDefaultValues();
//  const robot_state::JointModelGroup* joint_model_group = kinematic_model->getJointModelGroup("manipulator");

//  const std::vector<std::string> &joint_names = joint_model_group->getJointModelNames();






//////******************************************************************************************************
//  // Get Joint Values
//////******************************************************************************************************
//  // We can retreive the current set of joint values stored in the state for the right arm.
//  
//  ROS_INFO("\n Get Joint Values..............................................");
//  std::vector<double> joint_values;
//  kinematic_state->copyJointGroupPositions(joint_model_group, joint_values);
//  for(std::size_t i = 0; i < joint_names.size(); ++i)
//  {
//    ROS_INFO("Joint %s: %f", joint_names[i].c_str(), joint_values[i]);
//  }






//////******************************************************************************************************
//  // Joint Limits
//////******************************************************************************************************
//  // setJointGroupPositions() does not enforce joint limits by itself, but a call to enforceBounds() will do it.
//  /* Set one joint in the right arm outside its joint limit */
////  ROS_INFO("\n Joint Limits..............................................");
////  joint_values[0] = 1.57;
//  kinematic_state->setJointGroupPositions(joint_model_group, joint_values);

//  /* Check whether any joint is outside its joint limits */
//  ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));

//  /* Enforce the joint limits for this state and check again*/
//  kinematic_state->enforceBounds();
//  ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));






//////******************************************************************************************************
//  // Forward Kinematics
//////******************************************************************************************************
//  // Now, we can compute forward kinematics for a set of random joint
//  // values. Note that we would like to find the pose of the
//  // "r_wrist_roll_link" which is the most distal link in the
//  // "right_arm" of the robot.
//  
//    ROS_INFO("\n ****************Forward Kinematics****************");
//  kinematic_state->setToRandomPositions(joint_model_group);
//  const Eigen::Affine3d &end_effector_state = kinematic_state->getGlobalLinkTransform("tool0");

//  /* Print end-effector pose. Remember that this is in the model frame */
//  ROS_INFO_STREAM("Translation: \n" << end_effector_state.translation());
//  ROS_INFO_STREAM("Rotation:\n " << end_effector_state.rotation());






//////******************************************************************************************************
//  // Inverse Kinematics
//////******************************************************************************************************
//  // We can now solve inverse kinematics (IK) for the right arm of the
//  // PR2 robot. To solve IK, we will need the following:
//  //  * The desired pose of the end-effector (by default, this is the last link in the "right_arm" chain): end_effector_state that we computed in the step above.
//  //  * The number of attempts to be made at solving IK: 5
//  //  * The timeout for each attempt: 0.1 s
//    ROS_INFO("\n  ****************Inverse Kinematics****************");
//  bool found_ik = kinematic_state->setFromIK(joint_model_group, end_effector_state, 10, 0.1);

//  // Now, we can print out the IK solution (if found):
//  if (found_ik)
//  {
//    kinematic_state->copyJointGroupPositions(joint_model_group, joint_values);
//    for(std::size_t i=0; i < joint_names.size(); ++i)
//    {
//      ROS_INFO("Joint %s: %f", joint_names[i].c_str(), joint_values[i]);
//    }
//  }
//  else
//  {
//    ROS_INFO("Did not find IK solution");
//  }






//////******************************************************************************************************
//  // Get the Jacobian
//////******************************************************************************************************
//  // We can also get the Jacobian from the :moveit_core:`RobotState`.
//      ROS_INFO("\n ****************Get the Jacobian****************");
//  Eigen::Vector3d reference_point_position(0.0,0.0,0.0);
//  Eigen::MatrixXd jacobian;
//  kinematic_state->getJacobian(joint_model_group, kinematic_state->getLinkModel(joint_model_group->getLinkModelNames().back()),
//                               reference_point_position,
//                               jacobian);
//  ROS_INFO_STREAM("\n " << jacobian);

//  ros::shutdown();
//  return 0;
//}

//****************");****************");****************");****************");****************");****************");****************");****************");****************");****************");****************");****************");****************");****************");

#include <ros/ros.h>
#include <geometry_msgs/Pose.h>

// MoveIt!
#include <moveit_msgs/PlanningScene.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/GetStateValidity.h>
#include <moveit_msgs/DisplayRobotState.h>

#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/robot_state/conversions.h>


int main(int argc, char **argv)
{
  ros::init (argc, argv, "planning_scene_ros_api_tutorial");
  ros::AsyncSpinner spinner(1);
  spinner.start();

  ros::NodeHandle node_handle;
  ros::Duration sleep_time(5.0);
  sleep_time.sleep();
  sleep_time.sleep();
  
  
  // ROS API
 //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// The ROS API to the planning scene publisher is through a topic interface
// using "diffs". A planning scene diff is the difference between the current 
// planning scene (maintained by the move_group node) and the new planning 
// scene desired by the user. 

// Advertise the required topic
 //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Note that this topic may need to be remapped in the launch file 
  ros::Publisher planning_scene_diff_publisher = node_handle.advertise<moveit_msgs::PlanningScene>("planning_scene", 1);
  while(planning_scene_diff_publisher.getNumSubscribers() < 1)
  {
    ros::WallDuration sleep_t(0.5);
    sleep_t.sleep();
  }
  
  
  
  
  // Define the attached object message
 //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// We will use this message to add or 
// subtract the object from the world 
// and to attach the object to the robot
  moveit_msgs::AttachedCollisionObject attached_object;
  attached_object.link_name = "tool0";
  /* The header must contain a valid TF frame*/
  attached_object.object.header.frame_id = "tool0";
  /* The id of the object */
  attached_object.object.id = "box";

  /* A default pose */
  geometry_msgs::Pose pose;
  pose.orientation.w = 1.0;

  /* Define a box to be attached */
  shape_msgs::SolidPrimitive primitive;
  primitive.type = primitive.BOX;
  primitive.dimensions.resize(3);
  primitive.dimensions[0] = 0.1;
  primitive.dimensions[1] = 0.1;
  primitive.dimensions[2] = 0.1;

  attached_object.object.primitives.push_back(primitive);
  attached_object.object.primitive_poses.push_back(pose);

// Note that attaching an object to the robot requires 
// the corresponding operation to be specified as an ADD operation
  attached_object.object.operation = attached_object.object.ADD;


// Add an object into the environment
 //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Add the object into the environment by adding it to 
// the set of collision objects in the "world" part of the 
// planning scene. Note that we are using only the "object" 
// field of the attached_object message here.
  ROS_INFO("Adding the object into the world at the location of the right wrist.");
  moveit_msgs::PlanningScene planning_scene;
  planning_scene.world.collision_objects.push_back(attached_object.object);
  planning_scene.is_diff = true;
  planning_scene_diff_publisher.publish(planning_scene);
  sleep_time.sleep();
  
  
  // Attach an object to the robot
 //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// When the robot picks up an object from the environment, we need to 
// "attach" the object to the robot so that any component dealing with 
// the robot model knows to account for the attached object, e.g. for
// collision checking.

// Attaching an object requires two operations
//  * Removing the original object from the environment
//  * Attaching the object to the robot

  /* First, define the REMOVE object message*/
  moveit_msgs::CollisionObject remove_object;
  remove_object.id = "box";
  remove_object.header.frame_id = "odom_combined";
  remove_object.operation = remove_object.REMOVE;

// Note how we make sure that the diff message contains no other
// attached objects or collisions objects by clearing those fields
// first.
  /* Carry out the REMOVE + ATTACH operation */
  ROS_INFO("Attaching the object to the right wrist and removing it from the world.");
  planning_scene.world.collision_objects.clear();
  planning_scene.world.collision_objects.push_back(remove_object);
  planning_scene.robot_state.attached_collision_objects.push_back(attached_object);
  planning_scene_diff_publisher.publish(planning_scene);

  sleep_time.sleep();
  
  
  
  
  // Detach an object from the robot
 //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Detaching an object from the robot requires two operations
//  * Detaching the object from the robot
//  * Re-introducing the object into the environment

  /* First, define the DETACH object message*/
  moveit_msgs::AttachedCollisionObject detach_object;
  detach_object.object.id = "box";
  detach_object.link_name = "tool0";
  detach_object.object.operation = attached_object.object.REMOVE;

// Note how we make sure that the diff message contains no other
// attached objects or collisions objects by clearing those fields
// first.
  /* Carry out the DETACH + ADD operation */
  ROS_INFO("Detaching the object from the robot and returning it to the world.");
  planning_scene.robot_state.attached_collision_objects.clear();
  planning_scene.robot_state.attached_collision_objects.push_back(detach_object);
  planning_scene.world.collision_objects.clear();
  planning_scene.world.collision_objects.push_back(attached_object.object);
  planning_scene_diff_publisher.publish(planning_scene);

  sleep_time.sleep();
  
  
  // REMOVE THE OBJECT FROM THE COLLISION WORLD
 //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Removing the object from the collision world just requires
// using the remove object message defined earlier. 
// Note, also how we make sure that the diff message contains no other
// attached objects or collisions objects by clearing those fields
// first.
  ROS_INFO("Removing the object from the world.");
  planning_scene.robot_state.attached_collision_objects.clear();
  planning_scene.world.collision_objects.clear();
  planning_scene.world.collision_objects.push_back(remove_object);
  planning_scene_diff_publisher.publish(planning_scene);

  ros::shutdown();
  return 0;
  
}//END MAIN
